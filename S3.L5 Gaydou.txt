-- creazione tabella vendite. | l'istruzione "default" indica che in caso non venga inserito alcuno sconto viene applicato automaticamente lo sconto dello 0%
CREATE TABLE vendite (
    id_transazione INT,
    categoria_prodotto VARCHAR(255) not null unique,
    Costo DECIMAL(10, 2) not null,
    Sconto int default 0,
    PRIMARY KEY (id_transazione)
);

-- creazione tabella dettagli_Vendite | "default" indica che in caso non venga inserita alcuna quantità essa viene impostata automaticamente su 1
CREATE TABLE dettagli_Vendite (
    ID_Transazione INT not null,
    Data_Transazione DATE,
    Quantita INT default 1
);

-- Inserimento dei dati nella tabella Vendite
INSERT INTO vendite (id_transazione, categoria_prodotto, Costo, Sconto)
VALUES (1, 'Elettronica', 1000.00, 55),
       (2, 'Abbigliamento', 50.00, 22),
       (3, 'Alimentari', 10.00, 19),
       (4, 'Sport', 190.00, 56),
       (5, 'Casa', 58.00, 22),
       (6, 'Auto', 32.00, 10);

-- Inserimento dei dati nella tabella Dettagli_Vendite
insert into dettagli_Vendite (ID_Transazione, Data_Transazione, Quantita) values
       (1, '2024-01-01', 1),
       (2, '2024-01-07', 2),
       (3, '2024-01-06', 5),
       (4, '2023-11-15', 4),
       (5, '2024-01-02', 4),
       (5, '2024-01-08', 1),
       (6, '2024-01-07', 2),
       (4, '2023-11-19', 5),
       (3, '2024-01-08', 4),
       (3, '2024-01-05', 4),
       (6, '2024-01-08', 1),
       (3, '2024-01-05', 2),
       (2, '2024-01-06', 5),
       (1, '2023-12-31', 4),
       (1, '2024-01-06', 4),
       (2, '2024-01-08', 8),
       (2, '2024-01-06', 2),
       (3, '2024-01-06', 5),
       (5, '2024-01-04', 4),
       (2, '2024-01-05', 4),
       (3, '2024-01-04', 1),
       (1, '2024-01-07', 2),
       (1, '2023-12-31', 5),
       (5, '2023-11-08', 4),
       (4, '2024-01-05', 4),
       (1, '2024-01-01', 1),
       (2, '2024-01-07', 12),
       (3, '2024-01-06', 5),
       (4, '2023-11-25', 4),
       (5, '2024-01-02', 4),
       (5, '2024-01-08', 1),
       (6, '2024-01-07', 22),
       (4, '2024-01-06', 5),
       (3, '2024-01-08', 42),
       (3, '2024-01-05', 4),
       (6, '2024-01-08', 1),
       (3, '2023-12-28', 24),
       (2, '2024-12-31', 50),
       (1, '2024-01-05', 4),
       (1, '2024-01-06', 4),
       (2, '2024-01-08', 1),
       (2, '2024-01-06', 2),
       (3, '2024-01-06', 9),
       (5, '2024-01-04', 47),
       (2, '2023-12-28', 44),
       (3, '2024-01-04', 14),
       (1, '2023-12-31', 25),
       (1, '2024-01-04', 5),
       (5, '2023-12-28', 46),
       (4, '2024-01-05', 47);

-- QUERY

-- Seleziona tutte le vendite avvenute in una specifica data.
SELECT v.id_transazione, v.categoria_prodotto, v.Costo, v.Sconto, d.Data_Transazione, d.Quantita
FROM vendite v
JOIN dettagli_Vendite d on v.id_transazione = d.ID_Transazione
WHERE d.Data_Transazione = '2024-01-01';

-- Elenco delle vendite con sconti maggiori del 50%.
SELECT *
FROM vendite
WHERE Sconto > 50;

-- Calcola il totale delle vendite (costo) per categoria.
SELECT categoria_prodotto, sum(Costo * Quantita) as Totale_vendite
FROM vendite v
JOIN dettagli_Vendite d on v.id_transazione = d.ID_Transazione
GROUP BY categoria_prodotto;

-- Trova il numero totale di prodotti venduti per ogni categoria.
SELECT categoria_prodotto, sum(Quantita) as Totale_prodotti_venduti
FROM vendite v
JOIN dettagli_Vendite d on v.id_transazione = d.ID_Transazione
GROUP BY categoria_prodotto;

-- Seleziona le vendite dell'ultimo trimestre.
SELECT v.id_transazione, v.categoria_prodotto, v.Costo, v.Sconto, d.Data_Transazione, d.Quantita
FROM vendite v
JOIN dettagli_Vendite d on v.id_transazione = d.ID_Transazione
WHERE d.Data_Transazione >= DATE_SUB(CURDATE(), INTERVAL 3 month);

-- Raggruppa le vendite per mese e calcola il totale delle vendite per ogni mese. 
SELECT DATE_FORMAT(Data_Transazione, '%Y-%m') as Mese, sum(Quantita * Costo ) as Totale_vendite
FROM vendite v
JOIN dettagli_Vendite d on v.id_transazione = d.ID_Transazione
GROUP BY Mese;

-- Trova la categoria con lo sconto medio più alto.
SELECT categoria_prodotto, avg(Sconto) as Sconto_medio
FROM vendite
GROUP BY categoria_prodotto
ORDER BY Sconto_medio desc

--
